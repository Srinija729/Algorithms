import random
import time


def quick_sort(arr, low, high):                     
    if high - low > 1:                              
        p = partition(arr, low, high)               
        quick_sort(arr, low, p)                     
        quick_sort(arr, p + 1, high)                
    return arr                                      


def partition(arr, low, high):                      
    pivot = arr[low]                                
    i = low + 1                                     
    j = high - 1                                    

    while True:                                     
        while i <= j and arr[i] <= pivot:          
            i = i + 1                               
        while i <= j and arr[j] >= pivot:           
            j = j - 1                              

        if i <= j:                                  
            arr[i], arr[j] = arr[j], arr[i]        
        else:                                       
            arr[low], arr[j] = arr[j], arr[low]     
            return j                                


def binary_search(arr, low, high, x):
    while low <= high:                  
        mid = low + (high-low) // 2     
        if arr[mid] == x:               
            return mid                  
        elif arr[mid] < x:              
            low = mid + 1               
        elif arr[mid] > x:             
            high = mid - 1              
    return -1                           


def binary_search_test_1(n, m):
    int_list = []
    for i in range(0, n):
        int_list.append(random.randint(0, m))
    final_list = quick_sort(int_list, 0, n)
    target = random.randint(0, m)
    result = binary_search(final_list, 0, n - 1, target)
    return result


def binary_search_test_2(n, m, t):
    time_start = time.perf_counter()
    for j in range(t):
        binary_search_test_1(n, m)
    time_elapsed = (time.perf_counter() - time_start)
    return time_elapsed


def binary_search_test_3(n, m, t):
    time_start = time.perf_counter()
    for j in range(t):
        binary_search_test_1(n, m)
    time_elapsed = (time.perf_counter() - time_start)
    unit_time = time_elapsed/t
    return unit_time


def main():
    # int_list = [2, 16, 34, 56, 87]                                    
    # final_list = int_list.sort()
    # target = 16                                                      
    # binary_search(final_list, 0, len(final_list), target)           
    # print(final_list)
    # if result != -1:
    #     print("Element is present at index % d" % result)
    # else:
    #     print("Element is not present in array")
    # int_list = [2, 66, 348, 56, 87, 94, 63, 46]                      
    # quicksort(int_list, 0, len(int_list))                           
    for i in range(1, 6):
        print(binary_search_test_3(1000, 10000, 10**i))


if __name__ == '__main__':
    main()
